
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.InputMismatchException;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Date;

public class Main {
	static Scanner reader = new Scanner(System.in);
	static int meniu;
	private static String date1 = "";
	private static String date2 = "";
	static Date date3 = null;
	private static String inputCcy;

	public static void main(String[] args) throws IOException, ParseException {
		NumberFormat currencyDifferenceFormatter = new DecimalFormat("#0.0000");
		mainInput();

		switch (meniu) {

		case 0:
			System.out.println("Programa išjungta!");
			System.exit(1);
			break;
		case 1:
			date1 = "";
			inputCcy = "";
			date3 = null;
			while (true) {
				inputDate();
				boolean loop1 = true;

				inputCcy = reader.nextLine();
				inputCcy();
				do {
					FindCurrencyAmt ccy = new FindCurrencyAmt(date1, inputCcy);
					int reponseCode = ccy.getResponeCode();
					System.out.println("užklausos serverio atsakymas: " + reponseCode + "\n");
					if (ccy.getAmt() != 0) {
						if (date1.equals(ccy.getMaxDate()) || (date1 == ccy.getMaxDate())) {
							System.out.println("------------------------------------------------------------");
							System.out.println("Duomenys šios datos - " + ccy.getMaxDate() + ": ");

						} else {
							System.out.println("------------------------------------------------------------");
							System.out.println(
									"Jūsų nurodytai datai duomenų nėra (Savaitgalis, švenčių diena arba dar šios dienos duomenys nepateikti.");

							System.out.println("Yra vėliausi duomenys šiai datai: " + ccy.getMaxDate() + " : ");
						}
						System.out.println("Valiutos: " + inputCcy + " kursas: " + ccy.getAmt() + " už vieną eurą.");
						System.out.println("------------------------------------------------------------ \n");
						loop1 = false;

					} else {
						System.out.println("Klaidingas valiutos kodas, arba duomenų nėra.");
						inputCcy();
					}

				} while (loop1);
			}

		case 2:
			date1 = "";
			inputCcy = "";
			date3 = null;
			while (true) {
				inputDate();
				inputDateTo();
				while (datesNotEqual(date1, date2) == false) {
					date2 = "";
					System.out.println("Įvestos vienodos datos, arba antra data mažesnė už pirmą!!!");
					inputDateTo();
				}
				boolean loop1 = true;
				inputCcy = reader.nextLine();
				inputCcy();
				do {
					FindCurrencyAmt ccy1 = new FindCurrencyAmt(date1, inputCcy);
					String dateOfFirstXml = ccy1.getMaxDate();
					int reponseCode1 = ccy1.getResponeCode();
					double amtFirstDate = ccy1.getAmt();

					FindCurrencyAmt ccy2 = new FindCurrencyAmt(date2, inputCcy);
					String dateOfSecondXml = ccy2.getMaxDate();
					double amtSecondDate = ccy2.getAmt();
					int reponseCode2 = ccy2.getResponeCode();

					System.out.println("Pirmos užklausos serverio atsakymas: " + reponseCode1);
					System.out.println("Antros užklausos serverio atsakymas: " + reponseCode2 + "\n");
					if (dateOfFirstXml != dateOfSecondXml) {
						if ((amtFirstDate != 0) || (amtSecondDate != 0)) {
							if ((date2.equals(dateOfSecondXml) || (date2 == dateOfSecondXml))
									&& (date1.equals(dateOfFirstXml) || (date1 == dateOfFirstXml))) {
								System.out.println(
										"----------------------------------------------------------------------");
								System.out.println(
										"Duomenys šio intervalo: " + dateOfFirstXml + " - " + dateOfSecondXml + ": ");

							} else {
								System.out.println(
										"--------------------------------------------------------------------");
								System.out.println(
										"Jūsų nurodytam intervalui duomenų nėra (Savaitgalis, švenčių diena arba dar šios dienos duomenys nepateikti.");

								System.out.println("Yra vėliausi duomenys šiam intervalui: " + dateOfFirstXml + " - "
										+ dateOfSecondXml + " : ");
							}
							System.out.println("Valiutos: " + inputCcy + " kursai: " + dateOfFirstXml + ": "
									+ amtFirstDate + "  " + dateOfSecondXml + ": " + amtSecondDate);
							if (amtFirstDate > amtSecondDate) {

								System.out.println("Valiutos kursas sumažėjo: "
										+ currencyDifferenceFormatter.format(amtFirstDate - amtSecondDate) + " "
										+ inputCcy + " Euro atžvilgiu");
							} else if (amtFirstDate < amtSecondDate) {
								System.out.println("Valiutos kursas padidėjo: "
										+ currencyDifferenceFormatter.format(amtSecondDate - amtFirstDate) + " "
										+ inputCcy + " Euro atžvilgiu");
							} else {
								System.out.println("Valiutos kursas liko nepakitęs ir yra lygus: " + amtFirstDate + " "
										+ inputCcy + " Euro atžvilgiu");
							}
							System.out.println("-------------------------------------------------------------------- \n");
							loop1 = false;
						} else {
							System.out.println("Klaidingas valiutos kodas, arba duomenų nėra.");
							inputCcy();
						}
					} else {

						System.out.println("Nurodytam laiko intervalui duomenų nėra, įveskite didesnį intervalą.");
						inputDateTo();
					}

				} while (loop1);
			}
		default:
			System.out.println("Nėra šio pasirinkimo!");
			mainInput();
		}
	}

	private static boolean datesNotEqual(String date12, String date22) throws ParseException {

		LocalDate date1 = LocalDate.parse(date12);
		LocalDate date2 = LocalDate.parse(date22);

		if ((date1.isAfter(date2) == true) || (date1.isEqual(date2) == true)) {
			return false;
		} else {
			return true;
		}
	}

	private static void backToThePreviousMenu2() throws IOException, ParseException {
		if ((inputCcy == "-1") || (inputCcy.equals("-1"))) {
			main(null);
		}
	}

	private static void backToThePreviousMenu() throws IOException, ParseException {
		if ((date1 == "-1") || (date1.equals("-1"))) {
			main(null);
		}
	}

	private static int mainInput() {
		boolean loop = true;
		do {
			System.out.println(
					"Įveskite pasirinkimą:  1 - Valiutų kursai nurodytai datai, 2 - Valiutų kursai nurodytam periodui.    0 - Programos išjungimas. Kai parašote skaičių - spauskite ENTER. ");
			try {
				meniu = reader.nextInt();
				loop = false;

			} catch (InputMismatchException a) {
				System.out.print("Įvesti ne sakaičiai! \n");

				reader.next();
			}
		} while (loop);
		return meniu;
	}

	@SuppressWarnings("deprecation")
	private static String inputDate() throws IOException, ParseException {
		boolean loop = true;
		do {
			System.out.println(
					"Įveskite datą, pvz: 2019-01-01. Jei norite grįžti į ankstesnį meniu rašykite -1 ir spauskite Enter");

			date1 = reader.next();
			backToThePreviousMenu();
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

			try {
				date3 = dateFormat.parse(date1);
				int number = Integer.valueOf(date3.getYear() + "" + date3.getMonth() + "" + date3.getDay());
				if (number > 11481) {
					if (isValidDate(date1) == true) {

						loop = false;
					} else {
						System.out.println("Blogas datos formatas!!");
						loop = true;
					}
				} else {
					System.out.println("Įvesta data senesnė nei 2014-09-30. Yra duomenys nuo 2014-09-30.");
				}
			} catch (ParseException e) {
				System.out.println("Blogas datos formatas!");
			}
		} while (loop);

		return date1;
	}

	@SuppressWarnings("deprecation")
	private static String inputDateTo() throws IOException, ParseException {
		boolean loop = true;
		do {
			System.out.println(
					"Įveskite galine intervalo datą, pvz: 2019-01-30. Jei norite grįžti į ankstesnį meniu rašykite -1 ir spauskite Enter.");

			date2 = reader.next();
			backToThePreviousMenu();
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

			try {
				date3 = dateFormat.parse(date2);
				int number = Integer.valueOf(date3.getYear() + "" + date3.getMonth() + "" + date3.getDay());
				if (number > 11481) {
					if (isValidDate(date2) == true) {

						loop = false;
					} else {
						System.out.println("Blogas datos formatas!!");
						loop = true;
					}
				} else {
					System.out.println("Įvesta data senesnė nei 2014-09-30. Yra duomenys nuo 2014-09-30.");
				}
			} catch (ParseException e) {
				System.out.println("Blogas datos formatas!");
			}
		} while (loop);

		return date2;
	}

	private static boolean isValidDate(String d) {
		String regex = "^([1-2]{1}[0-9]{3}[-]?((0[13-9]|1[012])[-]?(0[1-9]|[12][0-9]|30)|(0[13578]|1[02])[-]?31|02[-/]?(0[1-9]|1[0-9]|2[0-8]))|([0-9]{2}(([2468][048]|[02468][48])|[13579][26])|([13579][26]|[02468][048]|0[0-9]|1[0-6])00)[-]?02[-/]?29)$";
		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher((CharSequence) d);
		return matcher.matches();
	}

	private static String inputCcy() throws IOException, ParseException {
		boolean loop = true;
		do {
			System.out.println(
					"Įveskite valiutos kodą iš trijų raidžių.        Jei norite grįžti į ankstesnį meniu rašykite -1 ir spauskite Enter.");
			inputCcy = reader.nextLine().toUpperCase();
			backToThePreviousMenu2();
			try {
				if (isValidCcy(inputCcy) == true) {

					loop = false;
				} else {
					System.out.println("Blogas valiutos formatas!!");
					loop = true;
				}
			} catch (Throwable e) {
				System.out.println("Blogas valiutos formatas  !");
				reader.next();
			}
		} while (loop);
		return inputCcy;
	}

	private static boolean isValidCcy(String ccy) {
		String regex = "[A-Z]{3}$";
		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher((CharSequence) ccy);
		return matcher.matches();
	}

}
